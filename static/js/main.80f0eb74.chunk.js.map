{"version":3,"sources":["videos/sunny.mp4","videos/cloudy.mp4","videos/strom.mp4","videos/lightning.mp4","videos/rain.mp4","videos/v1.mp4","App.js","reportWebVitals.js","index.js"],"names":["App","useState","weather","setweather","cityName","useRef","location","setLocation","submit","setSubmit","videoBg","setVideoBg","useEffect","name","current","value","latitude","longitude","axios","get","then","res","newWeather","data","main","cloudy","rain","strom","lightning","mist","sunny","navigator","geolocation","getCurrentPosition","position","coords","console","log","Box","sx","flexGrow","AppBar","Toolbar","backgroundColor","Typography","variant","component","src","muted","loop","autoPlay","Container","maxWidth","style","marginTop","marginBottom","Form","Control","ref","size","Button","onClick","color","margin","description","temp","wind","speed","humidity","sys","country","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.80f0eb74.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/sunny.8b5bedeb.mp4\";","export default __webpack_public_path__ + \"static/media/cloudy.195d4a0f.mp4\";","export default __webpack_public_path__ + \"static/media/strom.f4db934d.mp4\";","export default __webpack_public_path__ + \"static/media/lightning.dc9715c0.mp4\";","export default __webpack_public_path__ + \"static/media/rain.4e81a8c8.mp4\";","export default __webpack_public_path__ + \"static/media/v1.5f2050e6.mp4\";","import \"./App.css\";\nimport { useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\nimport sunny from \"./videos/sunny.mp4\";\nimport cloudy from \"./videos/cloudy.mp4\";\nimport strom from \"./videos/strom.mp4\";\nimport lightning from \"./videos/lightning.mp4\";\nimport rain from \"./videos/rain.mp4\";\nimport mist from \"./videos/v1.mp4\";\n// Material UI Imports\nimport AppBar from \"@mui/material/AppBar\";\nimport Box from \"@mui/material/Box\";\nimport Toolbar from \"@mui/material/Toolbar\";\nimport Typography from \"@mui/material/Typography\";\nimport Button from \"@mui/material/Button\";\nimport Container from \"@mui/material/Container\";\n// React Bootstrap\nimport { Form } from \"react-bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nfunction App() {\n  const [weather, setweather] = useState(null);\n  const cityName = useRef(null);\n  const [location, setLocation] = useState(null);\n  const [submit, setSubmit] = useState(false);\n  const [videoBg, setVideoBg] = useState(null);\n  useEffect(() => {\n    let name = \"\";\n    if (cityName.current.value) {\n      name = `q=${cityName.current.value}`;\n    } else if (location === null) {\n      name = `q=london`;\n    } else if (location) {\n      if (!location) {\n      } else if (location === \"fail\") {\n        name = \"q=new york\";\n      } else if (location && location.latitude) {\n        name = `lat=${location.latitude}&lon=${location.longitude}`;\n      }\n    }\n    if (name) {\n      axios\n        .get(\n          `https://api.openweathermap.org/data/2.5/weather?${name}&appid=363a0329911c1b074081245aae1023c3&units=metric`\n        )\n        .then((res) => {\n          const newWeather = res.data;\n          setweather(newWeather);\n          if (newWeather.weather[0].main === \"Clouds\") {\n            setVideoBg(cloudy);\n          } else if (newWeather.weather[0].main === \"Rain\") {\n            setVideoBg(rain);\n          } else if (newWeather.weather[0].main === \"Strom\") {\n            setVideoBg(strom);\n          } else if (\n            newWeather.weather[0].main ===\n            (\"Lightning\" || newWeather.weather[0].main === \"Thunder\")\n          ) {\n            setVideoBg(lightning);\n          } else if (newWeather.weather[0].main === \"Mist\") {\n            setVideoBg(mist);\n          } else {\n            setVideoBg(sunny);\n          }\n        });\n    }\n  }, [location, submit]);\n\n  useEffect(() => {\n    function getLocation() {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition((position) => {\n          setLocation({\n            latitude: position.coords.latitude,\n            longitude: position.coords.longitude,\n          });\n        });\n      } else {\n        console.log(\"Geolocation is not supported by this browser.\");\n      }\n    }\n    getLocation();\n  }, []);\n\n  return (\n    <>\n      <div>\n        <Box sx={{ flexGrow: 1 }}>\n          <AppBar position=\"static\">\n            <Toolbar sx={{ backgroundColor: \"#0D47A1\" }}>\n              <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1 }}>\n                Weather-App\n              </Typography>\n            </Toolbar>\n          </AppBar>\n        </Box>\n        <video src={videoBg} muted loop autoPlay></video>\n        <Container maxWidth=\"lg\">\n          <h1 style={{ marginTop: \"30px\", marginBottom: \"14px\" }}>City Name</h1>\n          <Form.Control ref={cityName} size=\"lg\" />\n          <Button\n            variant=\"contained\"\n            onClick={() => {\n              setSubmit(!submit);\n            }}\n            sx={{ backgroundColor: \"#0D47A1\", color: \"white\" }}\n            size=\"large\"\n            style={{ margin: \"10px\" }}\n          >\n            Submit\n          </Button>\n          {weather !== null ? (\n            <>\n              <h1 style={{ margin: \"14px\" }}>{weather.name} Weather</h1>\n              <h2 style={{ margin: \"14px\" }}>\n                Nature: {weather.weather[0].main} (Description:{\" \"}\n                {weather.weather[0].description})\n              </h2>\n              <h2 style={{ margin: \"14px\" }}>\n                Temperature: {weather.main.temp}\n              </h2>\n              <h2 style={{ margin: \"14px\" }}>\n                Wind Speed: {weather.wind.speed}\n              </h2>\n              <h2 style={{ margin: \"14px\" }}>\n                Humidity: {weather.main.humidity}\n              </h2>\n              <h2 style={{ margin: \"14px\" }}>Country: {weather.sys.country}</h2>\n            </>\n          ) : (\n            <h1>Loading...</h1>\n          )}{\" \"}\n        </Container>\n      </div>\n    </>\n  );\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}